     PUNCH ' SETSSI CB507535'
***********************************************************************
*                                                                     *
*        NAME:    CCAT    -  TSO COMMAND                              *
*                            FOR DYNAMIC DATASET CONCATENATION        *
*                            AND ALLOCATION                           *
*                                                                     *
* --------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        PURPOSE: Dynamic allocate/deallocate a dataset into a        *
*                 new DDname, or concatenate/deconcatenate a          *
*                 dataset into the top of existing concatenation.     *
*                                                                     *
*                 CCAT doesn't applicable for dataset being           *
*                 opened, uncataloged or cataloged in private         *
*                 catalog.      Disposition assigned by CCAT          *
*                 always SHAREd.                                      *
*                                                                     *
*        INPUT:   specified operands                                  *
*                                                                     *
*        OUTPUT:  Informational messages, or error messages and       *
*                 a return code.                                      *
*                                                                     *
*        SYNTAX:                                                      *
*                                                                     *
*        (1)   Perform allocation/deallocation:                       *
*                                               +-   -+ +-     -+     *
*              CCAT  F(ddname) DS(datasetname)  | ON  | | MSG   |     *
*                                               |     | |       |     *
*                                               | top | | nomsg |     *
*                                               |     | |       |     *
*                                               | bot | | emsg  |     *
*                                               |     | |       |     *
*                                               | off | | lmsg  |     *
*                                               +-   -+ +-     -+     *
*                                                                     *
*             Option 1.    ON    -   Allocate/concatenate the         *
*                                    specified DSname/DDname.  If     *
*                                    the DDname is already exist,     *
*                                    dataset will be concatenated     *
*                                    on the top of concatenation.     *
*                                                                     *
*                          TOP   -   Force to concatenate a dataset   *
*                                    to the top order of existing     *
*                                    concatenation.  If specified     *
*                                    dataset is newly added, this     *
*                                    option is default.               *
*                                                                     *
*                          BOT   -   Force to concatenate a dataset   *
*                                    to the bottom order of existing  *
*                                    concatenation.                   *
*                                                                     *
*                          OFF   -   Deallocate/deconcatenate the     *
*                                    specified DSname/DDname.         *
*                                                                     *
*                                                                     *
*             Option 2.    MSG   -   Display simple message (default) *
*                                                                     *
*                          NOMSG -   No messages will be displayed    *
*                                    upon completion.                 *
*                                                                     *
*                          EMSG  -   Display error messages only.     *
*                                                                     *
*                          LMSG  -   Display complete messages        *
*                                    (completion message and the      *
*                                    new concatenation list.          *
*                                                                     *
*        (2)   Display current specified DDname concatenation list:   *
*                                                                     *
*              CCAT  F(ddname)                                        *
*                                                                     *
*                                                                     *
*        ENTRYPOINTS: DERCCT   - Main Logic Processor                 *
*                     DERCCTDS - Dataset name Validity Check Routine  *
*                     DERCCTDD - DDNAME Validity Check Routine        *
*                     DERCCTLS - Concatenation list service routine   *
*                     DERCCTPL - PUTLINE/Messages service routine     *
*                                                                     *
*        CONTROL BLOCKS: CPPL    -  Command Processor Parameter List  *
*                        JFCB    -  Job File Control Block            *
*                        PPL     -  Parse Parameter List              *
*                        PCL     -  Parameter Control List            *
*                        PCE     -  Parameter Control Entry           *
*                        PDL     -  Parameter Descriptor List         *
*                        PDE     -  Parameter Descriptor Entry        *
*                        SWA     -  Scheduler Work Area               *
*                        S99RB   -  Dynamic allocation control block  *
*                        TIOT    -  Task I/O Table                    *
*                                                                     *
*                                                                     *
*        RETURN CODES:                                                *
*                    0   - SUCCESSFULL                                *
*                    4   - Request wasn't performed, because,         *
*                          dataset already allocated (ON), or         *
*                          dataset has not allocated yet (OFF).       *
*                    8   - Request was performed, but didn't          *
*                          effective, RC=4 returned by SVC 99.        *
*                          Current concatenation didn't changed.      *
*                   12   - Request was failed, SVC 99 produce         *
*                          RC=8.   Current specified DDname           *
*                          concatenation was not changed.             *
*                   16   - Request was failed, SVC 99 produce         *
*                          RC=12.   Current specified DDname          *
*                          concatenation was not garenteed.           *
*                   20   - Request was failed, SVC 99 produce         *
*                          RC=16.   Current specified DDname          *
*                          concatenation was unpredictable.           *
*                   24   - Syntax error.   Operand missing or         *
*                          invalid.   Request wasn't performed        *
*                          and the plane and command finished.        *
*                                                                     *
*                                                                     *
*      MESSAGES:                                                      *
*                                                                     *
*   CCAT000 XXXXX.YYYY.ZZZZZ successfully allocated.                  *
*   CCAT001 XXXXX.YYYY.ZZZZZ successfully concatenated.               *
*   CCAT002 XXXXX.YYYY.ZZZZZ successfully released.                   *
*   CCAT003 DDname DDDDDDDD already in use.                           *
*   CCAT004 XXXXX.YYYY.ZZZZZ unallocatable.                           *
*   CCAT005 XXXXX.YYYY.ZZZZZ already allocated.                       *
*   CCAT006 XXXXX.YYYY.ZZZZZ not cataloged.                           *
*   CCAT007 XXXXX.YYYY.ZZZZZ reserved by other job.                   *
*   CCAT008 DDname DDDDDDDD is illegal for SVC 99.                    *
*   CCAT009 DDname DDDDDDDD not allocated yet.                        *
*   CCAT010 XXXXX.YYYY.ZZZZZ not allocated yet                        *
*   CCAT011 DDname DDDDDDDD not available.                            *
*   CCAT012 DDname DDDDDDDD internally conflict.                      *
*   CCAT013 XXXXX.YYYY.ZZZZZ is a private catalog.                    *
*   CCAT014 Catalog error, XXXXX.YYYY.ZZZZZ not accessed              *
*   CCAT015 OBTAIN error, XXXXX.YYYY.ZZZZZ not accessed               *
*   CCAT800 DD(ddname) concatenation:                                 *
*           001 ---> DATA.SET                                         *
*           002 ---> MY.DATA.LIBRARY                                  *
*                    :                                                *
*           nnn ---> APPL.USER.DATA                                   *
*   CCAT900 Function failure, S99ERROR=nnnnn-P, contact your engineer.*
*   CCAT990 No dataset/DDname found in TIOT or JFCB                   *
*   CCAT999 SYNTAX ERROR, Operand missing or invalid                  *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        AUTHOR AND COPYRIGHT                                         *
*                                                                     *
*        AUTHOR:     Ir. DERU SUDIBYO                                 *
*                    Sr. Systems Designer                             *
*                    PT. SDD/BNI-1946 INDONESIA                       *
*                                                                     *
*        COPYRIGHT:  (C) 1991  DERU SUDIBYO                           *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*  MODIFICATION LOG                                                   *
*  -----------------------------------------------------------------  *
*  No.  DATE     ENGINEER       V.R.L   DESCRIPTION                   *
*  -----------------------------------------------------------------  *
*   1  01/14/91  Deru Sudibyo   1.0.0   1st development               *
*   2  01/18/91  Deru Sudibyo   1.0.1   Add LIST function             *
*   3  01/31/91  Deru Sudibyo   1.0.2   Makeup messages and operands  *
*   4  02/22/91  Stephen Davies 1.0.3   Correct bugs in LIST function *
*   5  04/06/91  Deru Sudibyo   1.1.0   Declare release VRL 1.1.0     *
*                                       and install in production     *
*   6  01/17/19  Deru Sudibyo   1.1.1   Add BOT (bottom) operand to   *
*                                       force a dataset move into the *
*                                       bottom of concatenation.      *
*   6  02/21/24  Hank Oerlemans 1.1.2   Cater for diag traps          *
*                                       Fix deconcat when 1st dsn     *
*                                                                     *
***********************************************************************
DERCCAT  TITLE  'DYNAMIC ALLOC/CONCATE UTILITY'
*=====================================================================*
*  MAIN LOGIC PROCESSOR                                               *
*                                                                     *
*        REGISTERS : R0  - UNUSED                                     *
*                    R1  - CPPL map area                              *
*                    R2  - PPL map area,                              *
*                          PDL map area, and then                     *
*                          DSLINK map area.                           *
*                    R3  - work register                              *
*                    R4  - work register                              *
*                    R5  - work register                              *
*                    R6  - S99RBP parameter block map area            *
*                    R7  - S99TUNIT, Text unit map area               *
*                    R8  - S99 TU Parameter list map area             *
*                    R9  - S99RB SVC 99 request block                 *
*                    R10 - Dynamic work area                          *
*                    R11 - Inner linkage address                      *
*                    R12 - Main Logic base                            *
*                    R13 - save area                                  *
*                    R14 - outer linkage address                      *
*                    R15 - return code                                *
*                                                                     *
*=====================================================================*
DERCCT   CSECT
DERCCT   AMODE 31
DERCCT   RMODE ANY
         ENTRY CCT
CCT      DS    0H
         SAVE  (14,12),,'DERCCT - CCAT/TSO/E - &SYSDATE - &SYSTIME'
         LR    R12,R15                 get base address
         USING DERCCT,R12              ESTABLISH addressability
         LR    R2,R1                   save PLIST address
         GETMAIN R,LV=STORAGE          obtain dynamic workarea
         LA    R10,L_SAVEAREA+8(R1)    past end of S99RBP and SAVEAREA
         USING CCATAREA,R10            CCAT area addressability
*        LR    R4,R10                  @2024feb testing
*        LR    R6,R4                   uncomment this code to mimic
*        LA    R5,L_CCATAREA           dirty getmaiun diag trap
*        SR    R7,R7
*        ICM   R7,8,=X'4F'             for testing only
*        MVCL  R4,R6
         STM   R0,R1,STOR_LEN          save storage specification
         ST    R1,S99P_PTR             save S99RBP pointer
         LA    R1,8(R1)                point to our savearea
         ST    R1,SAVE_PTR             and save here
         USING SAVEAREA,R1             savearea map
         ST    R1,8(R13)               save its address
         ST    R13,B_PTR
         LR    R13,R1
         XC    DSN_CHAIN,DSN_CHAIN     @2024feb
*2019jan XC    CCATFLAG,CCATFLAG       clean all flag bits
         ni    CCATFLAG,0              clean all flag bits     @2019jan
         DROP  R1
         USING SAVEAREA,R13
         LR    R1,R2
         ST    R1,CPPL_PTR             save CPPL pointer
         XC    RC,RC                   clear return code
         USING CPPL,R1                 establish CPPL addressability
         LA    R2,L_CCATAREA(R10)      past end CCAT DATA area
         ST    R2,PPL_PTR              save PPL pointer
         USING PPL,R2                  establish PPL addressability
         MVC   PPLUPT,CPPLUPT          save CPPL UPT address in PPL
         MVC   PPLECT,CPPLECT          ...also for ECT
         MVC   PPLCBUF,CPPLCBUF        ...and CPPL command buffer
         LA    R1,L_CCATAREA
         ST    R1,CCAT_LEN
         ST    R10,PPLUWA              and passed to VALIDCK routine
         ST    R10,CCAT_PTR            and also save here
         DROP  R1
         LA    R1,L_PPL(R2)            pass end PPL area
         ST    R1,ANSWER_PTR           save as answer pointer
         ST    R1,PPLANS               and also saved in PPL
         LA    R9,4(R1)                leave 1 fword
         ST    R9,S99RB_PTR            save as RB pointer
         L     R1,PCEADCON             point to PCE definition
         ST    R1,PCL_PTR              save PCL pointer
         ST    R1,PPLPCL               save as PCL poi
         XC    ECB,ECB                 clear ECB
         LA    R1,ECB                  point to ECB
         ST    R1,PPLECB               save in PPL area
         MVI   PROC_CODE,C'R'          process code
         MVC   REASON_CODE(4),=C'0000'
         CALLTSSR EP=IKJPARS,MF=(E,PPL) invoke PARSE routine
         LTR   R15,R15                 generate CC
         BNZ   ERROR_KWD               cleanup and exit if error
PROCESS  DS    0H
         L     R3,PPLANS               point to PCL
         DROP  R2
         L     R2,0(R3)                point to PDL
         LH    R3,6(R2)                get PDL length
         USING CCATPDL,R2              setup PCL addressability
         L     R9,S99RB_PTR            save as RB pointer
         LA    R8,L_S99RB(R9)          past end RB area
         ST    R8,TUPL_PTR             save as TUPList pointer
         LA    R7,32(R8)               skip 8 fullwords
         ST    R7,DDTU_PTR             save as DD TU pointer
         USING S99RBP,R6               SVC 99 RB pointer map
         USING S99TUNIT,R7             TEXT UNIT addresability
         USING S99TUPL,R8              TEXT UNIT PLIST map
         USING S99RB,R9                SVC 99 RB addressability
         L     R6,S99P_PTR             point to RBP
         ST    R9,S99RBPTR             store pointer of S99RB
         OI    S99RBPTR,S99RBPND       specify 31 bit addressing
         LA    R7,14(R7)               past end DD TU
         ST    R7,DSTU_PTR             save as DS TU
         LA    R7,50(R7)               long jumping pass DS TU
         ST    R7,TU_PTR               save as general purpose TU
         DROP  R6                      not use anymore
         EJECT
GETSCMD  DS    0H
         XC    MSGPARM(8),MSGPARM      clean all msg parameters
         XC    MSGSKEL(12),MSGSKEL     clean all msg skeletons
*2019jan XC    COMMAND,COMMAND         clear SUB COMMAND
         ni    COMMAND,0               clear SUB COMMAND       @2019jan
         XC    ER_CODE,ER_CODE         clear error code
         LH    R3,PDLCMD               get subcommand keyword
         BCTR  R3,0                    reduce 1
         SLL   R3,3                    multiply 8
         B     *+4(R3)                 select the following paths
         OI    COMMAND,$ON             indicate subcmd 'ON'
         B     GETDSN                  continue to get DSN
         OI    COMMAND,$ON+$TOP        indicate subcmd 'TOP'
         B     GETDSN                  continue to get DSN
         OI    COMMAND,$ON+$BOT        indicate subcmd 'BOT'   @2019jan
         B     GETDSN                  continue to get DSN
         OI    COMMAND,$ON+$BOT        indicate subcmd 'BOT'   @2019jan
         B     GETDSN                  continue to get DSN
                                       SPACE
GETDSN   DS    0H
         CLC   DSNAME(2),=H'1'         1=LIST  isn't it ?
         BNE   GETDSN_GO               No, skip it
*2019jan NI    COMMAND,0               clean all flag bits
*2019jan OI    COMMAND,$LIST           indicate display CONCAT list
         mvi   COMMAND,$LIST           indicate display CONCAT @2019jan
         B     GETDDN                  then jump to process DDname
GETDSN_GO      DS 0H
         L     R7,DSTU_PTR             point to DS text unit
         LM    R3,R4,DSN_PARM          get DSN address and pointer
         MVC   S99TUNUM(2),=X'0001'       always 1
         STH   R4,S99TULNG             put DSN length in text unit
         BCTR  R4,0                    -1
         EX    R4,MVCDSN               copy DSN into TU
                                       SPACE
GETDDN   DS    0H
         CLC   DDNAME,=H'0'            is DDN spacified ?
         BNH   ERROR_KWD               No, error
         L     R7,DDTU_PTR             point to DD text unit
         MVC   S99TUNUM(2),=X'0001'       always 1
         LM    R3,R4,DDN_PARM          access specified DDname
         STH   R4,S99TULNG             put length here
         MVC   S99TUPAR(8),0(R3)       enter SVC 99 parameter
GETMSG   DS    0H
         TM    COMMAND,$LIST           does CONCAT list only ?
         BO    CLEANUP                 go here if so
         LH    R3,PDLMSG               get msg sign
         BCTR  R3,0                    minus 1
         SLL   R3,3                    multiply 8
         B     *+4(R3)                 pass thru selected path
         OI    COMMAND,$MSG            indicate full msg
         B     EXECUTE                 go execute
         OI    COMMAND,$NOMSG          indicate no msg
         B     EXECUTE                 go execute
         OI    COMMAND,$EMSG           indicate error msg only
         B     EXECUTE                 go execute
         OI    COMMAND,$LIST           indicate display CONCAT list
                                       SPACE
EXECUTE  DS    0H
         TM    COMMAND,$ON             request = alloc ?
         BO    ACCESS                  YES, perform it
         B     RELEASE                 otherwise, deallocate
MVCDSN   MVC   S99TUPAR(*-*),0(R3)       << EXECUTED >>
         DROP  R2
         EJECT
*---------------------------------------------*
* DSNAME/DDNAME ALLOCATION/CONCATENATION      *
*---------------------------------------------*
* Logic flow:                                 *
* 1.  Check info using specified DDNAME       *
* 2.  If it has already allocated on the      *
*     top of concatenation, then ignore       *
*     request.                                *
*     Otherwise, DEALLOCATE entire concate-   *
*     nation, then ALLOCATE the specified     *
*     dataset name, so concatenate all of the *
*     previous concatenation members as well. *
* 3.  Check the result.   If it was not       *
*     accepted, the turn back to previous     *
*     condition as best it can.               *
* 4.  Return to TSO and produce return code.  *
*---------------------------------------------*
         USING DSLINK,R2               DSN_Chained list addressability
                                       SPACE
ACCESS   DS    0H
         BAS   R14,SETALLOC            prepare SVC 99 PLIST
         BNZ   ACCESS_NEW              suppose has not allocated yet
         TM    CCATFLAG,$DDN           has ddname found in TIOT
         BNO   ACCESS_NEW              no, process as new allocation
         MVC   MSGSKEL(12),MSG_ALRDY   msg skeleton
         MVC   MSGPARM(8),DSN_PARM     use DDn for msg
         BAS   R14,LOOKUP_DSN          look up in Chained JFCB
         bnz   ACCESS_CONCAT           this way if none        @2019jan
         TM    CCATFLAG,$DSN           has it allocated ?
         BNO   ACCESS_CONCAT           no, continue to add it
         tm    COMMAND,$done           complied the request?   @2019jan
         bo    In_good_order           yes, just ignore it     @2019jan
*2019jan TM    COMMAND,$TOP            is it forced to be moved up ?
         tm    COMMAND,$TOP+$BOT       to be moved up/down?    @2019jan
*2019jan BNO   IGNORE_ON               NO, don't process it
         bz    IGNORE_ON               NO, just ignore it      @2019jan
         mvc   MSGSKEL(12),MSG_DDBUSY  msg skeleton            @2019jan
         mvc   MSGPARM(8),DDN_PARM     use DDn for msg         @2019jan
         bas   R14,DEALLOC_ALL         no, deallocate all      @2019jan
         bnz   CANCEL_ON               break if error          @2019jan
         tm    COMMAND,$top            to be moved to the top? @2019jan
         bo    REALLOC_ON              yes, take this way      @2019jan
         b     REALLOC_bot             no, take this new way   @2019jan
ACCESS_CONCAT  DS 0H
*2019jan MVC   MSGSKEL(12),MSG_DDBUSY  msg skeleton
*2019jan MVC   MSGPARM(8),DDN_PARM     use DDn for msg
         tm    COMMAND,$BOT            to be moved down?       @2019jan
         bo    ACCESS_CONCAT_bot       yes, take this way      @2019jan
         BAS   R14,DEALLOC_ALL         deallocate all concatenation
         BNZ   CANCEL_ON               break if error
         B     REALLOC_ON              assume no allocated dataset
ACCESS_CONCAT_bot equ *                                        @2019jan
         la    R2,DSN_CHAIN            point to start of chain @2019jan
         bas   R14,SETCONCT            set concatenation PLIST @2019jan
         L     R7,ALLOC_DSN            point to DSN TU
         L     R6,DSTU_PTR             point to general DSN TU
         MVC   S99TULNG(46),4(R6)      return to original value
         MVC   MSGPARM(8),DSN_PARM     use DDn for msg
         b     REALLOC_DD              continue this way
ACCESS_NEW     DS 0H
         OI    CCATFLAG,$NEW           indicate new DDname
         MVC   MSGSKEL(12),MSG_DSWRONG msg skeleton
         MVC   MSGPARM(8),DSN_PARM     use DDn for msg
         BAS   R14,ALLOC_PERM          just allocate it
         BNZ   ERROR                   break if error
         OI    CCATFLAG,$DDN           it is allocated I guess !
         B     FINISH                  then job finished
CLC_DSN  CLC   S99TUPAR(*-*),0(R3)     << EXECUTED >>
         EJECT
*---------------------------------------------*
* DSNAME/DDNAME DEALLOCATION/DECONCATENATION  *
*---------------------------------------------*
* Logic flow:                                 *
* 1.  Check info using specified DDNAME       *
*     for existences of both specified DD     *
*     and DS names.                           *
* 2.  If both are not any, ignore request     *
*     Else, DEALLOCATE entire concatenation   *
*     members, then REALLOCATE one of them    *
*     so concatenate all of others as well    *
*     except specified dataset name that      *
*     requested to be deallocated.            *
* 3.  Check the result.  If it was unexpected,*
*     back to old condition as best it can.   *
* 4.  Return to TSO and produce returncode.   *
*---------------------------------------------*
                                       SPACE
RELEASE  DS    0H
         MVC   MSGSKEL(12),MSG_DDMISS  msg skeleton
         MVC   MSGPARM(8),DDN_PARM     use DDn for msg
         TM    CCATFLAG,$DDN           has ddname found in TIOT
         BNO   IGNORE_OFF              no, ignore
         BAS   R14,SETALLOC            setup TU and check
         BNZ   IGNORE_OFF              no, ignore it
         MVC   MSGSKEL(12),MSG_DSMISS  msg skeleton
         MVC   MSGPARM(8),DSN_PARM     use DSn for msg
         BAS   R14,LOOKUP_DSN          look up in Chained JFCB
         TM    CCATFLAG,$DSN           has DSN allocated ?
         BNO   IGNORE_OFF              no, ignore it
         st    R2,SAVE_REGS            save top of ptr chain   @2019jan
         MVC   MSGSKEL(12),MSG_DDBUSY  msg skeleton
         MVC   MSGPARM(8),DDN_PARM     use DDn for msg
         BAS   R14,DEALLOC_ALL         otherwise, deallocate all
         BNZ   CANCEL_OFF              break if error
         CLC   DD_COUNT,=H'1'          single allocation ?
         BH    REALLOC_OFF             no, reallocate all others
         LA    R2,DSN_CHAIN            point to start of chain
         OI    DSLFLAG,$ERRALC         it is unallocable anymore
         NI    DSLFLAG,X'FF'-$ON       turn off eligible bit
         B     FINISH                  then finish
         EJECT
*---------------------------------------------*
* SELECTIVE REALLOCATION AFTER ALLOC/DEALLOC  *
*---------------------------------------------*
                                       SPACE
REALLOC  DS    0H
REALLOC_OFF    EQU *
*2019jan L     R2,SAVE_REGS            restore top of chain pointer
*2019jan LTR   R2,R2                   check chained address
         icm   R2,15,SAVE_REGS         restore top of chain    @2019jan
         BZ    FINISH                  finish if no more
*2024feb begin hack to deal with deconcat of first dsn
         LM    R3,R4,DSN_PARM
         BCTR  R4,0                    @2024feb
         EX    R4,REL_CLC              @2024feb
         BNE   REALLOC_one             @2024feb
         ICM   R3,15,DSLNEXT           @2024feb
         BZ    FINISH                  @2024feb
         MVC   DSLDDN-DSLINK(8,R3),DSLDDN @2024feb
         LR    R2,R3                   @2024feb
         B     REALLOC_one             @2024feb
REL_CLC  CLC   0(R4,R3),DSLDSN         @2024feb
REALLOC_one    DS 0H                   @2024feb
*2024feb end hack
         L     R7,ALLOC_DSN            point to alloc DSN TU
         MVC   S99TULNG(2),DSLLEN+2    copy its length
         MVC   S99TUPAR(44),DSLDSN     copy its string
         OI    DSLFLAG,$ERRCON         and sign as unconcatable
         B     REALLOC_ALL             go to reallocate it
REALLOC_bot    DS 0H
         st    R2,SAVE_REGS            save top of ptr chain   @2019jan
         LA    R2,DSN_CHAIN            point to start of chain @2019jan
*        b     REALLOC_bot_fwd         jump to this way        @2019jan
REALLOC_bot_seek equ *                                         @2019jan
         L     R7,DSTU_PTR             point to general DS TU  @2019jan
         TM    DSLFLAG,$ERRALC+$ERRCON is it reallocable ?     @2019jan
         BZ    REALLOC_bot_go          use if valid            @2019jan
REALLOC_bot_fwd equ *                                          @2019jan
         icm   R2,15,DSLNEXT           get next DSLINK         @2019jan
         bnz   REALLOC_bot_seek        iterate                 @2019jan
         l     R2,SAVE_REGS            restore top of chain    @2019jan
         b     ACCESS_NEW              treat as single alloc   @2019jan
REALLOC_bot_go equ *                                           @2019jan
         oi    COMMAND,$done           borrow this 4 indicator @2019jan
         ni    COMMAND,255-$bot        turn this bit off       @2019jan
         L     R7,ALLOC_DSN            point to DSN TU         @2019jan
         L     R3,DSLLEN               get its length          @2019jan
         STH   R3,S99TULNG             store to TU             @2019jan
         MVC   S99TUPAR(44),DSLDSN     ...also DSN             @2019jan
         BAS   R14,ALLOC_PERM          subcommand = ON         @2019jan
         BZ    *+8                     go after done           @2019jan
         OI    CCATFLAG,$ON            remember it is pending  @2019jan
         icm   R2,15,DSLNEXT           get next DSLINK         @2019jan
         bz    REALLOC_next_check      this way if no more     @2019jan
         b     REALLOC_PERM_DONE+4     else, process it        @2019jan
REALLOC_ON     equ *
         L     R7,ALLOC_DSN            point to DSN TU
         L     R6,DSTU_PTR             point to general DSN TU
         MVC   S99TULNG(46),4(R6)      return to original value
REALLOC_ALL    equ *
         MVC   MSGPARM(8),DSN_PARM     use DDn for msg
         BAS   R14,ALLOC_PERM          subcommand = ON
         BZ    REALLOC_PERM_DONE       go after done
         OI    CCATFLAG,$ON            remember it is pending
REALLOC_PERM_DONE equ *
         LA    R2,DSN_CHAIN            point to start of chain
         BAS   R14,SETCONCT            setup concatenation PLIST
REALLOC_LOOP   equ *
         L     R7,DSTU_PTR             point to general DS TU
         TM    DSLFLAG,$ERRALC+$ERRCON is it reallocable ?
         BZ    REALLOC_OKEY            use if valid
REALLOC_CHEK   equ *
         TM    DSLFLAG,$ERRCON         is it just unreconcatable ?
         BO    REALLOC_NEXT            skip if so
         NI    DSLFLAG,X'FF'-$ON       turn off eligible bit
         B     REALLOC_NEXT            then skip it
REALLOC_OKEY   equ *
         L     R7,ALLOC_DSN            point to DSN TU
         L     R3,DSLLEN               get its length
         STH   R3,S99TULNG             store to TU
         MVC   S99TUPAR(44),DSLDSN     ...also DSN
         TM    CCATFLAG,$ON            is perm allocation pending ?
         BO    REALLOC_PERM_AGAIN      reallocate an other permanently
REALLOC_DD     equ *                                           @2019jan
         L     R7,ALLOC_DDN            point to DDN TU
         MVI   S99TULNG+1,8            length all = 8
         MVC   S99TUPAR(8),DSLDDN      use temp. DDN
         BAS   R14,ALLOC_TEMP          allocate for temporary
         BNZ   REALLOC_CHEK            sign check bit
         L     R7,CONCT_DDN            point to DDN TU
         LH    R3,S99TULNG             get PARM length
         LA    R3,S99TUPAR(R3)         pass over PARM string
         MVC   0(2,R3),=X'0008'        length = 8
         MVC   2(8,R3),DSLDDN          assign Temp DDN as source
         BAS   R14,CONCATE             reconcatenate all old concate-
         BNZ   REALLOC_CHEK            sign check bit
REALLOC_NEXT   equ *
         tm    COMMAND,$BOT            to be moved down?       @2019jan
         bo    FINISH                  yes, just leave it      @2019jan
*2019jan L     R2,DSLNEXT              get next DSLINK
*2019jan LTR   R2,R2                   check for end of entry
*2019jan BZ    FINISH                  finish if 0
*2019jan BCT   R11,REALLOC_LOOP        otherwise, loop
         icm   R2,15,DSLNEXT           get next DSLINK         @2019jan
         bnz   REALLOC_LOOP            iterate for all         @2019jan
REALLOC_next_check equ *                                       @2019jan
         tm    COMMAND,$done           concate at the bottom?  @2019jan
         bno   FINISH                  no, just leave it       @2019jan
         oi    COMMAND,$bot            yes, indicate it        @2019jan
         ni    COMMAND,255-$done       turn this bit off       @2019jan
         icm   R2,15,SAVE_REGS         restore top of chain    @2019jan
         bnz   ACCESS_CONCAT_bot       this way if got it      @2019jan
         B     FINISH                  then finish
REALLOC_PERM_AGAIN equ *
         BAS   R14,ALLOC_PERM          allocate permanently
         BNZ   REALLOC_CHEK            sign check bit
         NI    CCATFLAG,X'FF'-$ON      turn pending bit off
         B     REALLOC_NEXT
                                       SPACE
*---------------------------------------------*
* LOOKUP DSN_CHAINED LIST AND VALIDATE        *
*---------------------------------------------*
LOOKUP_DSN     DS 0H
         LA    R2,DSN_CHAIN            point to DSN Chained list
         LR    R1,R2                   and save it
*2019jan XR    R15,R15                 clear RC
         LA    R15,12                  set RC=12               @2019jan
         L     R7,DSTU_PTR             point general DSN TU
LOOKUP_LOOP    equ *
         L     R3,DSLLEN               get its length
         BCTR  R3,0                    reduce for EX CLC
         EX    R3,LOOKUP_CLC           is it duplication ?
         BNE   LOOKUP_NEXT             ignore if unmatch
         xr    r15,r15                 set rc = 0              @2019jan
         OI    CCATFLAG,$DSN           remember it exists
         OI    DSLFLAG,$ERRALC         flag for unreallocable
         CR    R1,R2                   is it the 1st entry
*2019jan BNE   LOOKUP_NEXT             ignore if not
         be    LOOKUP_top              this way if so          @2019jan
LOOKUP_check   equ *                                           @2019jan
         icm   r0,15,DSLNEXT           point to next entry     @2019jan
         bnz   LOOKUP_NEXT             if not 0, ignore it     @2019jan
LOOKUP_bot     equ *                                           @2019jan
         tm    COMMAND,$bot            to be moved to bottom?  @2019jan
         bo    LOOKUP_comply           yes, mark as complied   @2019jan
         b     LOOKUP_NEXT             no, skip below          @2019jan
LOOKUP_top     equ *                                           @2019jan
         L     R1,DSLNEXT              switch to next entry
         tm    COMMAND,$TOP            to be moved to the top? @2019jan
         bno   LOOKUP_NEXT             no, skip below          @2019jan
LOOKUP_comply  equ *                                           @2019jan
         oi    COMMAND,$done           remember it is complied @2019jan
LOOKUP_NEXT    equ *
*2019jan L     R2,DSLNEXT              point to next entry
*2019jan LTR   R2,R2                   CHECK
         icm   r2,15,DSLNEXT           point to next entry     @2019jan
         BNZ   LOOKUP_LOOP             loop for all entries
*2019jan CR    R15,R1                  is top pointer valid ?
*2019jan BNE   LOOKUP_STOP             stop end if so
*2019jan LR    R1,R15                  else, zerroes R1
*2019jan LA    R15,12                  set RC=12
LOOKUP_STOP    equ *
         LA    R2,DSN_CHAIN            restore DSN Chainedlist pointer
         LTR   R15,R15                 generate CC
         bzr   r14                     return if 0             @2019jan
         xr    r1,r1                   else, zeroes reg 1      @2019jan
         BR    R14                     return
LOOKUP_CLC     CLC S99TUPAR(*-*),DSLDSN   << executed >>
         EJECT
*---------------------------------------------*
* ALLOCATE SPECIFIED DSN AS SPECIFIED DDNAME  *
*---------------------------------------------*
ALLOC_TEMP     DS 0H
         LA    R1,L_ALLOC_TEMP         select temporary
         MVI   PROC_CODE,C'T'          process code
         B     ALLOCATE                then allocate
ALLOC_PERM DS  0H
         LA    R1,L_ALLOC_PERM         select permanent
         MVI   PROC_CODE,C'A'          process code
ALLOCATE DS    0H
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBAL        request is allocation
         L     R8,TUPL_PTR             point to TUPLIST
         ST    R8,S99TXTPP             store TUPLIST in RB
         MVC   0(L_ALLOC_TUPLIST,R8),ALLOC_TUPLIST copy specified TUPL
         LA    R8,0(R8,R1)             skip to the last TUPLIST
         BAS   R11,DYNALLOC            invoke SVC 99
         BZR   R14                     return if fine
         CLI   PROC_CODE,C'T'          check process code
         BNE   ALLOCATE_FAIL           go here if fail
         OI    CCATFLAG,$ERRS99        put error flag
ALLOCATE_END   DS 0H
         LTR   R15,R15                 regenerate CC
         BR    R14                     return
ALLOCATE_FAIL  DS 0H
         STH   R15,ER_CODE             save error code here
         OI    CCATFLAG,$ERRALC        put error flag
         B     ALLOCATE_END            end, return
                                       SPACE
*---------------------------------------------*
* CONCATE THE REMAINDER TO THE ALLOCATED DSN  *
*---------------------------------------------*
                                       SPACE
CONCATE  DS    0H
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBCC        request is CONCATENATION
         LA    R8,CONCT_TUPLIST        point to PLIST
         ST    R8,S99TXTPP             save here
         LA    R8,L_CONCT_TUPLIST-4(R8) point to last TU PTR
         MVI   PROC_CODE,C'C'          process code
         BAS   R11,DYNALLOC            invoke SVC 99
         BZR   R14                     return if no error
         OI    CCATFLAG,$ERRCON+$ERRS99 turn error bit on
         LTR   R15,R15                 regenerate CC
         BR    R14                     return
                                       SPACE
*---------------------------------------------*
* RELEASE DSN FROM DDNAME CONCATENATION       *
*---------------------------------------------*
                                       SPACE
DEALLOC_ALL    DS 0H
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBUN        request is DEALLOCATION
         LA    R8,RELSE_TUPLIST        point to PLIST
         ST    R8,S99TXTPP             save here
         LA    R8,L_RELSE_ALL(R8)      point to last TU PTR
         MVI   PROC_CODE,C'U'          process code
         BAS   R11,DYNALLOC            invoke SVC 99
         BZR   R14                     return if so good
         CH    R15,=H'4'               is it tolerable error ?
         BH    DEALLOC_FAIL            no,.... error msg
DEALLOC_ONE    DS 0H
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBUN        request is DEALLOCATION
         LA    R8,RELSE_TUPLIST        point to PLIST
         ST    R8,S99TXTPP             save here
         LA    R8,L_RELSE_ONE(R8)      point to last TU PTR
         MVI   PROC_CODE,C'U'          process code
         BAS   R11,DYNALLOC            invoke SVC 99
         BZR   R14                     return if so good
         OI    CCATFLAG,$ERRS99        indicate general error
         CLC   =H'0856',S99ERROR       overriding disposition ?
         BER   R14                     return if so
*        CLC   =H'1088',S99ERROR       dsname not found ?
*        BER   R14                     return if so
         CLC   =H'1116',S99ERROR       DSN permanently concatenated ?
         BER   R14                     return if so
*        CLC   =H'1120',S99ERROR       DSN // DDN not associated ?
*        BER   R14                     return if so
         CLC   =H'1124',S99ERROR       DSN is in private catalog ?
         BER   R14                     return if so
DEALLOC_FAIL   DS 0H
         STH   R15,ER_CODE             save error code here
         OI    CCATFLAG,$ERRUNL        put error flag
         LTR   R15,R15                 regenerate CC
         BR    R14                     return
         EJECT
*---------------------------------------------*
* BUILD INFORMATION RETRIEVAL TEXT UNITS      *
* and save the pointer in QRY_TUPLIST         *
*---------------------------------------------*
SETALLOC DS    0H                             *
         L     R7,DSTU_PTR             point to DSN text unit
         MVC   S99TUKEY(2),=AL2(DALDSNAM) query for specififed DDname
         L     R2,TU_PTR               point to general TU
         LH    R3,S99TULNG             get its parm length
         MVC   0(50,R2),0(R7)          save the TU
         ST    R2,ALLOC_DSN            save the pointer in directry
         LA    R7,50(R2)               skip over the TU area
         MVC   S99TUKEY(2),=AL2(DALPERMA) permanent alloaction
         XC    S99TUNUM(2),S99TULNG    number must be 0
         ST    R7,ALLOC_ATR            save the pointer in directry
         LA    R7,4(R7)                skip over this TU
         MVC   S99TUKEY(2),=AL2(DALSTATS) permanent alloaction
         MVC   S99TUNUM(2),=X'0001'    number must be 1 @2024feb
         MVC   S99TULNG(2),=X'0001'    1 bytes length @2024feb
         MVI   S99TUPAR,$SHR           DISP=SHR
         ST    R7,ALLOC_STS            save the pointer in directry
         LA    R7,8(R7)                skip over this TU
         L     R2,DDTU_PTR             point to DD text unit
         MVC   0(14,R7),0(R2)          load whole DD TU
         MVC   S99TUKEY(2),=AL2(DALDDNAM) DDname to be allocated
         ST    R7,ALLOC_DDN            save the pointer in directry
         LA    R2,14(R7)               next area
         ST    R2,TU_PTR               start of available TU area
                                       SPACE
*---------------------------------------------*
* BUILD DEALLOCATION TEXT UNITS               *
* and save the pointer in RELSE_TUPLIST       *
*---------------------------------------------*
SETRELSE DS    0H                             *
         L     R2,DSTU_PTR             point to DSN text unit
         L     R7,TU_PTR               point to general TU
         MVC   S99TUNIT(50),0(R2)      load the TU
         MVC   S99TUKEY(2),=AL2(DUNDSNAM) query for specififed DDname
         LH    R3,S99TULNG             get its parm length
         ST    R7,RELSE_DSN            save the pointer in directry
         LA    R7,50(R7)               skip over the TU area
         MVC   S99TUKEY(2),=AL2(DUNUNALC) permanent alloaction
         XC    S99TUNUM(2),S99TULNG    number must be 0
         ST    R7,RELSE_ATR            save the pointer in directry
         LA    R7,4(R7)                skip over this TU
         L     R2,DDTU_PTR             point to DD text unit
         MVC   S99TUNIT(50),0(R2)      load the TU
         MVC   S99TUKEY(2),=AL2(DUNDDNAM) DDname to be allocated
         ST    R7,RELSE_DDN            save the pointer in directry
         LA    R2,14(R7)               next area
         ST    R2,TU_PTR               start of available TU area
                                       SPACE
*---------------------------------------------*
* BUILD INFORMATION RETRIEVAL TEXT UNITS      *
* and save the pointer in QRY_TUPLIST         *
*---------------------------------------------*
SETQUERY DS    0H
         L     R7,DDTU_PTR             point to DD text unit
         MVC   S99TUKEY(2),=AL2(DINDDNAM) query for specififed DDname
         L     R2,TU_PTR               point to general TU
         LH    R3,S99TULNG             get its parm length
         MVC   0(50,R2),0(R7)          save the TU
         ST    R2,QRY_DDN              save the pointer in directry
         LA    R7,6(R3,R2)             skip over the TU area
         MVC   S99TUKEY(2),=AL2(DINRTATT) ask for allocation attibute
         MVC   S99TUNUM(2),=X'0001'    always 1
         MVC   S99TULNG(2),=X'0001'
         MVI   S99VERB,S99VRBIN        request to get info
         ST    R7,QRY_ATR              save the pointer in directry
         LA    R7,8(R7)                skip over this TU
         MVC   S99TUKEY(2),=AL2(DINRTDSN) ask for dataset name
         MVC   S99TUNUM(2),=X'0001'    always 1
         MVC   S99TULNG(2),=X'002C'    44 bytes length
         ST    R7,QRY_DSN              store into TUPlist
         LA    R7,50(R7)               skip over their area
         ST    R7,TU_PTR               save as available TU area
QUERY    DS    0H                             *
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBIN        request is INFO. RETRIEVAL
         L     R8,TUPL_PTR             point to TUPLIST
         ST    R8,S99TXTPP             store TUPLIST in RB
         MVC   0(L_QRY_TUPLIST,R8),QRY_TUPLIST copy specified TUPL
         LA    R8,L_QRY_TUPLIST-4(R8)  skip to the last TUPLIST
         MVI   PROC_CODE,C'I'          process code
         BAS   R11,DYNALLOC            invoke SVC 99
         BR    R14                     RETURN
                                       SPACE
*---------------------------------------------*
* BUILD CONCATENATION TEXT UNITS              *
* and save the pointer in CONCT_TU_PTR        *
*---------------------------------------------*
SETCONCT DS    0H                             *
         L     R7,TU_PTR               point to general TU
         MVC   S99TUKEY(2),=AL2(DCCPERMC) permanent alloaction
         XC    S99TUNUM(2),S99TUNUM    number must be 0
         ST    R7,CONCT_ATR            save the pointer in directry
         LA    R7,4(R7)                skip over this TU
         ST    R7,CONCT_DDN            save the pointer in directry
         L     R3,DDTU_PTR             point to DD text unit
         MVC   S99TUNIT(14),0(R3)      load whole DD TU
         MVC   S99TUKEY(2),=AL2(DCCDDNAM) DDname to be allocated
         MVI   S99TUNUM+1,X'02'        PARM num = 2
         LA    R7,24(R7)               next area
         ST    R7,TU_PTR               start of available TU area
                                       SPACE
*---------------------------------------------*
* BUILD DECONCATENATION TEXT UNITS            *
* and save the pointer in DECON_TU_PTR        *
*---------------------------------------------*
SETDECON DS    0H                             *
         BR    R14                     RETURN
         EJECT
*---------------------------------------------*
* PROLOGUE PRIOR SVC 99 SERVICE LOGIC         *
*---------------------------------------------*
S99_PROLG DS   0H
         L     R9,S99RB_PTR            point to RB
         XC    S99RB(L_S99RB),S99RB    clear the area
         MVI   S99RBLN,L_S99RB         save it's self length
         BR    R11                     RETURN
                                       SPACE
*------------------------------------------------*
* INVOKING SVC 99 SERVICE FOR DYNAMIC ALLOCATION *
*------------------------------------------------*
DYNALLOC DS    0H
         OI    S99TUPTR,S99TUPLN       and sign EOTUPLIST
         L     R1,S99P_PTR             point to SVC 99 plist pointer
         SVC   99                      invoke SVC 99
         TM    CCATFLAG,$ERRALC+$ERRUNL has any error before ?
         BNZ   DYNALLOC_END            skip if so
         MVC   IF_CODE,S99INFO         save info code
         MVC   RS_CODE,S99ERROR        save reason code
DYNALLOC_END   DS 0H
         STH   R15,RT_CODE             save return code
         LTR   R15,R15                 check CC
         BR    R11                     RETURN
         EJECT
*-------------------------------------*
*  EXIT EPILOG ROUTINE WITH ERRONOUS  *
*-------------------------------------*
FINISH   DS    0H
         TM    CCATFLAG,$ERRALC+$ERRUNL  has it any erronous
         BNZ   ERROR                   Yes, go to error routine
         B     RETURN                  else, cleanup and return
                                       SPACE
*----------------------------------------*
*  EXIT EPILOG ROUTINE WITH CANCELLATION *
*----------------------------------------*
In_good_order  ds 0h                                           @2019jan
         MVC   MSGSKEL(12),MSG_INORDER msg skeleton            @2019jan
         MVC   MSGPARM(8),DSN_PARM     use DDn for msg         @2019jan
         B     IGNORE                  then take this way      @2019jan
IGNORE_ON      DS 0H
         OI    CCATFLAG,$ERRALC        indicate error allocation
         B     IGNORE                  then cancel it
IGNORE_OFF     DS 0H
         OI    CCATFLAG,$ERRUNL        indicate error deallocation
IGNORE   DS    0H
         LA    R15,4                   ignoring RC = 4
*2019jan ST    R15,RC                  save RC
*2019jan TM    COMMAND,$NOMSG          is NOMSG/EMSG required ?
*2019jan BO    CLEANUP                 YES, so quit immediately
*2019jan B     CHECK_MSG               prepare msg to be displayed
         b     LEAVE                   continue this way       @2019jan
                                       SPACE
CANCEL_ON      DS 0H
         OI    CCATFLAG,$ERRALC        indicate error allocation
         B     CANCEL                  then cancel it
CANCEL_OFF     DS 0H
         OI    CCATFLAG,$ERRUNL        indicate error deallocation
CANCEL   DS    0H
         LA    R15,8                   cancellation RC = 8
LEAVE    DS    0H                                              @2019jan
         ST    R15,RC                  save RC
         TM    COMMAND,$NOMSG          is NOMSG/EMSG required ?
         BO    CLEANUP                 YES, so quit immediately
         B     CHECK_MSG               prepare msg to be displayed
                                       SPACE
*-------------------------------------*
*  EXIT EPILOG ROUTINE WITH ERRONOUS  *
*-------------------------------------*
ERROR    DS    0H
         TM    COMMAND,$ON+$ERRS99     is it allocation or any g.error
         BZ    ERRFAIL                 no, need not recovery
         BAS   R11,S99_PROLG           prepare to invoke SVC 99
         MVI   S99VERB,S99VRBAL        request is allocation
         L     R8,TUPL_PTR             point to TUPLIST
         ST    R8,S99TXTPP             store TUPLIST in RB
         MVC   0(L_ALLOC_TUPLIST_RETRY,R8),ALLOC_TUPLIST_RETRY
         LA    R8,L_ALLOC_TUPLIST_RETRY-4(R8) skip to last TUPLIST
         OI    S99TUPTR,S99TUPLN       and sign EOTUPLIST
         L     R1,S99P_PTR             point to SVC 99 plist pointer
         SVC   99                      invoke SVC 99
         LTR   R15,R15                 check CC
         BZ    ERRFAIL                 go here if recovery success
         OI    CCATFLAG,$ERRCVRY       else, indicate recovery error
         LA    R15,12                  set RC=12
         STH   R15,ER_CODE             save it
                                       SPACE
ERRFAIL  DS    0H
         LH    R15,ER_CODE             get standard SVC 99 RC
         LA    R15,4(R15)              add 4
         ST    R15,RC                  save RC
         TM    COMMAND,$NOMSG          is NOMSG/EMSG required ?
         BO    CLEANUP                 YES, so quit immediately
         BAS   R14,BUILDSKL            construct msg skeleton
         BZ    CHECK_MSG               success, proceed
         BAS   R14,BUILDMSG            construct msg text
         MVC   MSGHDR+5(2),RETURN_CODE+2 insert RC in msg header
         L     R15,MSGPARM             point to substitution location
         MVI   5(R15),C'+'             insert process code
         B     CHECK_MSG
                                       SPACE
*-------------------------------------*
*  ERROR KEYWORD OR SYNTAX            *
*-------------------------------------*
ERROR_KWD DS   0H
         MVI   PROC_CODE,C'K'          process code
         OI    CCATFLAG,$ERRKWD        remember it is syntax error
         TM    COMMAND,$NOMSG          is NOMSG/EMSG required ?
         BO    CLEANUP                 YES, so quit immediately
         L     R15,ERRKWD_PTR          get ERROR KWD pointer
         MVC   MSGLINE(L'ERRKWD),0(R15)   and move here
         MVC   MSGLEN,=Y(L'ERRKWD+4)
         BAS   R14,SHOW_MSG            display MSG
         LM    R2,R3,HELPTAB_PTR       access help table
         MVC   MSGHDR,=CL8' '          clear
HELPLOOP DS    0H
         MVC   MSGTEXT(L_HELPTAB),0(R2) get help text
         MVC   MSGLEN,=Y(L'MSGHDR+L_HELPTAB+4) ...and its length
         BAS   R14,SHOW_MSG            display MSG
         LA    R2,L_HELPTAB(R2)        next help text
         BCT   R3,HELPLOOP             loop for all
         LA    R15,20                  RC = 20
         ST    R15,RC                  save RC
         B     EXIT                    then exit to TSO
         EJECT
*-------------------------------------*
*  EXIT EPILOG ROUTINE IF NO ERROR    *
*-------------------------------------*
RETURN   DS    0H
         LH    R15,ER_CODE             load error code
         LTR   R15,R15                 check CC
         BNZ   ERROR                   error if wrong
         TM    COMMAND,$NOMSG+$EMSG    is NOMSG/EMSG required ?
         BNZ   CLEANUP                 YES, so quit immediately
         MVC   MSGPARM(8),DSN_PARM     substitute msg text using DSN
         TM    COMMAND,$ON             is it ON function ?
         BO    RETURN_MSG              yes, handle completion msg
         MVC   MSGSKEL(12),MSG_OFF     else, use OFF completion msg
         B     CHECK_MSG               then,  process it
RETURN_MSG     DS 0H
         MVC   MSGSKEL(12),MSG_ON      select msg skeleton
         TM    CCATFLAG,$NEW           is it new allocation ?
         BNO   CHECK_MSG               no, use normal completion msg
         MVC   MSGSKEL(12),MSG_NEW     otherwise, use special msg
CHECK_MSG      DS 0H
         BAS   R14,BUILDMSG            build msg text line
DISPLAY_MSG    DS 0H
         BAS   R14,SHOW_MSG            display MSG
         B     CLEANUP                 then cleanup
                                       SPACE
*-------------------------------------*
*   PUTLINE SERVICE GATE              *
*-------------------------------------*
                                       SPACE
SHOW_MSG DS    0H
         ST    R14,SAVE14              save linkage pointer
         XC    MSGLEN+2(2),MSGLEN+2
         L     R15,PUTLINE_PTR         point to PUTLINE service
         BASR  R14,R15                 perform it
         L     R14,SAVE14              save linkage pointer
         BR    R14                     return
SHOW_DSN DS    0H
         LA    R15,64                  msg text length
         STH   R15,MSGLEN              and store here
         B     SHOW_MSG                then display MSG
MVC_LIST_NEW   MVC MSGTEXT+8(*-*),S99TUPAR
         EJECT
*-------------------------------------*
*  BUILD PUTLINE FORMAT MSG SKELETON  *
*  - R14 :  Linkage address           *
*-------------------------------------*
                                       SPACE
BUILDSKL DS    0H
         USING MSGBLOK,R5              msg directory blok map
         MVC   MSGPARM(8),DSN_PARM     suppose for substitution
         LM    R5,R7,MSGDIR_PTR        point to msg directory entry
BSKLOOP1 DS    0H
         CLC   MSGCODE,RS_CODE         is it the error code ?
         BE    BSKLOKEY                leave this loop if so
         LA    R5,MSGBLOKL(R5)         otherwise, seek next entry
         BCT   R6,BSKLOOP1             .. then loop for all entries
BSKLOOP2 DS    0H
         CLC   MSGCODE(1),RS_CODE      check 1st byte only
         BE    BSKLOKEY                leave this loop if match
         LA    R5,MSGBLOKL(R5)         otherwise, seek next entry
         BCT   R7,BSKLOOP2             .. then loop for all entries
         MVC   MSGSKEL(12),MSG_FAIL    it is function failure
         LA    R15,REASON_CODE         access reason code field
         ST    R15,MSGPARM             use as substitution parameter
         MVC   MSGPARM+4(4),=F'6'      length is always 4
         LH    R15,RS_CODE             get reason code
         CVD   R15,PACKED              convert to packed decimal
         UNPK  REASON_CODE,PACKED      unpack
         OI    REASON_CODE+3,X'F0'     convert to printable EBCDIC
         B     BSKLEND                 finish
BSKLOKEY DS    0H
         NI    CCATFLAG,X'FF'-$ERRCVRY turn off recovery flag bit
         XR    R15,R15                 reset CC
         L     R2,MSGDIR_PTR           point to msg directory entry
         AH    R2,MSGSKLA              correct msg skeleton address
         MVC   MSGSKEL(12),0(R2)       select this address for later
         TM    MSGFLAG,$DSN            is substitution right ?
         BO    BSKLEND                 yes, continue to build msg line
         MVC   MSGPARM(8),DDN_PARM     else, use DDname
BSKLEND  DS    0H
         LTR   R15,R15                 generate CC
         BR    R14                     return
         DROP  R5
                                       SPACE
*-------------------------------------*
*  BUILD PUTLINE FORMAT MSG TEXT LINE *
*  - R14 :  Linkage address           *
*-------------------------------------*
                                       SPACE
BUILDMSG DS    0H
         L     R2,SKLHDR               msg header
         LH    R3,SKLHDRL              ...its length
         LR    R15,R3                  initialize msg length
         LA    R5,MSGLINE              access msg text
         EX    R3,MVCLINE              contruct msg line
         LA    R5,0(R5,R3)             skip over writen line
         LM    R2,R3,MSGPARM           access substitutor
         AR    R15,R3                  add line length
         EX    R3,MVCLINE              contruct msg line
         LA    R5,0(R5,R3)             skip over writen line
         L     R2,SKLTXT               msg text trailer
         LH    R3,SKLTXTL              ...its length
         AR    R15,R3                  add line length
         EX    R3,MVCLINE              contruct msg line
         LA    R15,4(R15)              add 4
         L     R1,RC                   get RC
         LTR   R1,R1                   check
         BZ    BLDMEND                 end this routine if RC=0
         L     R1,RC                   load RC
         CVD   R1,PACKED               convert to packed decimal
         UNPK  RETURN_CODE,PACKED      unpack
         OI    RETURN_CODE+3,X'F0'     convert to printable EBCDIC
         LA    R5,0(R5,R3)             skip over writen line
         MVC   RC_TEXT,RC_LINE         build RC skeleton
         MVC   RC_MSG,RETURN_CODE      and put its value in
         LA    R2,RC_TEXT              point to text of RC
         LA    R3,L'RC_TEXT            and access its length
         AR    R15,R3                  correct total length
         EX    R3,MVCLINE              move RC text to msg line
BLDMEND  DS    0H
         STH   R15,MSGLEN              total msg length
         BR    R14                     return
MVCLINE  MVC   0(*-*,R5),0(R2)
         EJECT
*-------------------------------------*
*    FINAL EXIT EPILOG ROUTINE        *
*                                     *
*   NOTES:                            *
*                                     *
*        - The following logic quiet  *
*          unstructured due to        *
*          performance reason so far. *
*                                     *
*        - To make it structured      *
*          logic, remove all "TM"     *
*          instruction into SHOW_MSG  *
*          routine.                   *
*                                     *
*-------------------------------------*
CLEANUP  DS    0H
         TM    COMMAND,$NOMSG          is msg allowed ?
         BNO   CLEANUP_SETUP           no, skip, continue to cleanup
         NI    COMMAND,X'FF'-$LIST     make sure no MSG
         NI    CCATFLAG,0              ...and msg opportunity at all
         B     CLEANUP_GO              then continue to cleanup
CLEANUP_SETUP  DS 0H
         USING DSLINK,R2               TIOT copy chain addressability
         TM    COMMAND,$LIST           does CONCAT list requested ?
         BNO   CLEANUP_GO              no, skip, continue to cleanup
         L     R7,DDTU_PTR             point to DD TU
         MVI   MSGLINE,X'40'           use blank to clear msg area
         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE
         MVC   MSGHDR,=C'CCAT800 '     special header
         LA    R5,MSGTEXT              access msg text
         LM    R2,R3,JOBSPEC           access jobname and its length
         EX    R3,MVCLINE              move in jobname
         LA    R5,0(R5,R3)             jump over jobname string
         MVC   0(3,R5),=C'DD('
         LA    R5,3(R5)                jump over this string
         LM    R2,R3,DDN_PARM          access DDN string
         BCTR  R3,0                    correct for EX MVC
         EX    R3,MVCLINE              move in ddname
         LA    R5,1(R5,R3)             jump over ddname string
         MVC   0(16,R5),=CL16') concatenation:'
         LA    R5,16(R5)               jump over this string
         LR    R3,R5                   copy
         LA    R2,MSGLEN               PUTLINE text address
         SLR   R5,R2                   calculate text length
         STH   R5,MSGLEN               save the length
         TM    CCATFLAG,$DDN           has it allocated ?
         BO    CLEANUP_TPUT            skip if so
         MVC   0(10,R3),=CL10' not found'
         LA    R3,10(R3)               jump over this string
         SLR   R3,R2                   correct text length
         STH   R3,MSGLEN               save the length
         NI    COMMAND,X'FF'-$LIST     remove list flag
CLEANUP_TPUT   DS 0H
         BAS   R14,SHOW_MSG            display msg
         MVI   MSGLINE,X'40'           use blank to clear msg area
         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE
         TM    CCATFLAG,$ERRALC+$ERRUNL any serious error ?
         BNZ   CLEANUP_GO              skip and proceed
CLEANUP_GOHEAD DS 0H
         TM    COMMAND,$LIST           does CONCAT list requested ?
         BNO   CLEANUP_GO              no, continue to cleanup
         TM    COMMAND,$ON             is it allocation ?
         BNO   CLEANUP_GO              skip if deallocation
         MVC   MSGTEXT(8),=CL8'New --> ' put new sign
         L     R7,DSTU_PTR             point to DSN TU
         LH    R3,S99TULNG             get its length
         BCTR  R3,0                    reduce for EX
         EX    R3,MVC_LIST_NEW         get DSN
         BAS   R14,SHOW_DSN            display msg
CLEANUP_GO     DS 0H
         LA    R2,DSN_CHAIN            point to chaining TIOT copy
         L     R11,DSLNEXT             get next chain
         LH    R3,DD_COUNT             # of concatenation members
         LA    R3,1(R3)                add 1 for initialize loop
         B     CLEANUP_ROLL            and go here
CLEANUP_LOOP   DS 0H
         TM    COMMAND,$LIST           does CONCAT list requested ?
         BNO   CLEANUP_ONLY            skip if not
         LA    R2,DSN_CHAIN            point to chaining TIOT copy
         MVC   MSGTEXT(3),DSLDDN+5
         MVC   MSGTEXT+3(5),=CL5' --> '
         TM    DSLFLAG,$ON             DSN eligible to be displayed ?
         BO    CLEANUP_LIST            skip if not
         MVC   MSGTEXT(8),=CL8'Error'  mark error
         TM    CCATFLAG,$ERRCON        does CONCAT list requested ?
         BO    CLEANUP_LIST            skip if not
         MVC   MSGTEXT(8),=CL8'Skipped' mark skipped
CLEANUP_LIST   DS 0H
         MVC   MSGTEXT+8(44),DSLDSN    write DSN string into msg text
         BAS   R14,SHOW_DSN            else display it
         LTR   R2,R11                  check if 0
         BZ    QUIT                    quit if 0
         MVC   DSN_CHAIN(L_DSLINK),0(R11) move next chain here
         B     CLEANUP_FRET
CLEANUP_ONLY   DS 0H
         LTR   R2,R11                  check if 0
         BZ    QUIT                    quit if 0
CLEANUP_FRET   DS 0H
         L     R11,DSLNEXT             get next chain
         FREEMAIN R,LV=L_DSLINK,A=(2)  release it
CLEANUP_ROLL   DS 0H
         BCT   R3,CLEANUP_LOOP         loop if any other chained area
         DROP  R2
QUIT     DS    0H
         TM    CCATFLAG,$ERRCVRY       has error recoverd ?
         BNO   EXIT                    yes, skip to exit
         MVC   MSGHDR,=CL8' '          clear msg header
         L     R15,CONCATE_PTR         point to concatenationlist serv
         BASR  R14,R15                 perform this service
EXIT     DS    0H
         L     R5,RC                   save RC
         L     R1,STOR_PTR             point to GETMAINed area
         L     R13,B_PTR               restore system savearea pointer
         DROP  R13                     reset privatearea addressing
         FREEMAIN R,LV=STORAGE,A=(1)   release storage
         L     R14,12(R13)
         LR    R15,R5
         LM    R0,R12,20(R13)
         BSM   0,R14
         EJECT
*-------------------------------------*
*  SERVICE ROUTINE DIRECTORY          *
*-------------------------------------*
PUTLINE_PTR    DC A(DERCCTPL)          PUTLINE service routine address
CONCATE_PTR    DC A(DERCCTLS)          concatenation list service
MSGDIR_PTR     DC A(MSGDIR,MSGDIRN,MSGDIRM) skeleton directory ptr/len
ERRKWD_PTR     DC A(ERRKWD)            syntax error text pointer
HELPTAB_PTR    DC A(HELPTAB,HELPTABL)  syntax help table pointer
PCEADCON       DC A(PCEDEFS)
                                       SPACE
*-------------------------------------*
*  LITERALS POOL  #1                  *
*-------------------------------------*
         LTORG
         EJECT
*-------------------------------------*
*  MESSAGES SKELETONS DIRECTORY       *
*-------------------------------------*
MSGDIR   DS    0H
         DC    AL2(0572),AL1($DSN),XL1'00',AL2(MSG_UNCAT-MSGDIR)
         DC    AL2(0596),AL1($DSN),XL1'00',AL2(MSG_DSBUSY-MSGDIR)
         DC    AL2(0868),AL1($DDN),XL1'00',AL2(MSG_DDWRONG-MSGDIR)
         DC    AL2(0872),AL1($DSN),XL1'00',AL2(MSG_DSWRONG-MSGDIR)
         DC    AL2(1040),AL1($DDN),XL1'00',AL2(MSG_DDUNAVL-MSGDIR)
         DC    AL2(1056),AL1($DDN),XL1'00',AL2(MSG_DDBUSY-MSGDIR)
         DC    AL2(1060),AL1($DSN),XL1'00',AL2(MSG_DSWRONG-MSGDIR)
         DC    AL2(1076),AL1($DDN),XL1'00',AL2(MSG_DDCNFLC-MSGDIR)
         DC    AL2(1080),AL1($DDN),XL1'00',AL2(MSG_DDMISS-MSGDIR)
         DC    AL2(1084),AL1($DDN),XL1'00',AL2(MSG_DDUNAVL-MSGDIR)
         DC    AL2(1088),AL1($DSN),XL1'00',AL2(MSG_DSMISS-MSGDIR)
         DC    AL2(1096),AL1($DSN),XL1'00',AL2(MSG_ALRDY-MSGDIR)
MSGDIRX  DC    AL2(1124),AL1($DSN),XL1'00',AL2(MSG_PRVCAT-MSGDIR)
MSGDIRL  EQU   *-MSGDIRX
MSGDIRN  EQU   (*-MSGDIR)/MSGDIRL
         DC    XL2'5700',AL1($DSN),XL1'00',AL2(MSG_ERCAT-MSGDIR)
         DC    XL2'1700',AL1($DSN),XL1'00',AL2(MSG_UNCAT-MSGDIR)
         DC    XL2'6700',AL1($DSN),XL1'00',AL2(MSG_EROBT-MSGDIR)
MSGDIRM  EQU   (*-MSGDIR)/MSGDIRL
                                       SPACE
*-------------------------------------*
*  MESSAGES TEXT SKELETONS            *
*-------------------------------------*
MSGSKL   DS    0H
MSG_NEW        DC  AL4(MH000),AL4(MT000),AL2(L'MH000),AL2(L'MT000)
MSG_ON         DC  AL4(MH001),AL4(MT001),AL2(L'MH001),AL2(L'MT001)
MSG_OFF        DC  AL4(MH002),AL4(MT002),AL2(L'MH002),AL2(L'MT002)
MSG_DDBUSY     DC  AL4(MH003),AL4(MT003),AL2(L'MH003),AL2(L'MT003)
MSG_DSWRONG    DC  AL4(MH004),AL4(MT004),AL2(L'MH004),AL2(L'MT004)
MSG_ALRDY      DC  AL4(MH005),AL4(MT005),AL2(L'MH005),AL2(L'MT005)
MSG_UNCAT      DC  AL4(MH006),AL4(MT006),AL2(L'MH006),AL2(L'MT006)
MSG_DSBUSY     DC  AL4(MH007),AL4(MT007),AL2(L'MH007),AL2(L'MT007)
MSG_DDWRONG    DC  AL4(MH008),AL4(MT008),AL2(L'MH008),AL2(L'MT008)
MSG_DDMISS     DC  AL4(MH009),AL4(MT009),AL2(L'MH009),AL2(L'MT009)
MSG_DSMISS     DC  AL4(MH010),AL4(MT010),AL2(L'MH010),AL2(L'MT010)
MSG_DDUNAVL    DC  AL4(MH011),AL4(MT011),AL2(L'MH011),AL2(L'MT011)
MSG_DDCNFLC    DC  AL4(MH012),AL4(MT012),AL2(L'MH012),AL2(L'MT012)
MSG_PRVCAT     DC  AL4(MH013),AL4(MT013),AL2(L'MH013),AL2(L'MT013)
MSG_ERCAT      DC  AL4(MH014),AL4(MT014),AL2(L'MH014),AL2(L'MT014)
MSG_EROBT      DC  AL4(MH015),AL4(MT015),AL2(L'MH015),AL2(L'MT015)
MSG_INORDER    DC  AL4(MH016),AL4(MT016),AL2(L'MH016),AL2(L'MT016)
MSG_FAIL       DC  AL4(MH900),AL4(MT900),AL2(L'MH900),AL2(L'MT900)
MSGSKLL  EQU   *-MSGSKL
RC_LINE  DC    C', RC=0000.' RC for msg line
         DROP  R7,R8,R9
         EJECT
*=====================================================================*
*                                                                     *
*  CONCAT SERVICE ROUTINE                                             *
*  DSNAME OPERAND VALIDATOR                                           *
*---------------------------------------------------------------------*
*                                                                     *
*  FUNCTIONS:                                                         *
*        Check and enter the specified DSname from DS() operand       *
*        of this command based on standard DSN string pattern in      *
*        MVS system.                                                  *
*                                                                     *
*  INPUT:                                                             *
*        Specified DS(dsname) in CONCAT operand                       *
*                                                                     *
*  OUTPUT:                                                            *
*        - DSN string pointer and length in CCATAREA storage          *
*                                                                     *
*  RETURN CODES:                                                      *
*        - 0   : specified dsname is valid                            *
*                                                                     *
*                                                                     *
*=====================================================================*
         ENTRY DERCCTDS
DERCCTDS DS    0D
         SAVE  (14,12),,'DERCCTDS: CCAT DSN VALIDATOR'
         LR    R9,R15                  point to base register
         USING DERCCTDS,R9             establish addessability
         USING CCATAREA,R10            establish addressability
         LR    R2,R1                   copy validity check PLIST
         L     R10,4(R2)               point to the DWA
*2019jan XC    VALCFLAG,VALCFLAG       clear flag byte
*2019jan OI    VALCFLAG,$DSN           remember to process DSN
         mvi   VALCFLAG,$DSN           remember to process DSN @2019jan
         B     VALIDATE                proceed
                                       SPACE
*=====================================================================*
*                                                                     *
*  CONCAT SERVICE ROUTINE                                             *
*  PUTLINE SERVICE CALL                                               *
*---------------------------------------------------------------------*
*                                                                     *
*  FUNCTIONS:                                                         *
*        Structuring MSG prototype and call PUTLINE to display        *
*                                                                     *
*  INPUT:                                                             *
*        MSG text                                                     *
*                                                                     *
*  OUTPUT:                                                            *
*        - MSG text displayed onto screen                             *
*                                                                     *
*  RETURN CODES:                                                      *
*        - R15 : as resulted from PUTLINE service processor           *
*                                                                     *
*=====================================================================*
         ENTRY DERCCTPL
DERCCTPL DS    0D
L_DELTA_PUTLS  EQU   *-DERCCTDS
         SAVE  (14,12),,'DERCCTPL: CCAT MSG SERVICE'
         LA    R9,L_DELTA_PUTLS        get delta
         SR    R15,R9                  correct the program base
         LR    R9,R15                  copy current base register
*2019jan XC    VALCFLAG,VALCFLAG       clear flag byte
         ni    VALCFLAG,0              clear flag byte         @2019jan
         B     VALIDATE                perform validation
                                       SPACE
         EJECT
*=====================================================================*
*                                                                     *
*  CONCAT SERVICE ROUTINE                                             *
*  DATASET CHAINED-LINKED LIST DISPLAY SERVICE                        *
*---------------------------------------------------------------------*
*                                                                     *
*  FUNCTIONS:                                                         *
*        Check and enter the specified DDname from F( ) operand       *
*        of this command based on standard DDN string pattern in      *
*        MVS system,  try to check if it has been allocated in        *
*        TIOT.                                                        *
*        If so, then try to lookup JFCB to search all datasets        *
*        concatenated with, and build DSN chained list (DSLINK)       *
*        as a private CONCAT control block                            *
*                                                                     *
*  INPUT:                                                             *
*        Specified LIST keyword insted of DSN() or,                   *
*        LMSG keyword instead of EMSG or NOMSG                        *
*                                                                     *
*  OUTPUT:                                                            *
*        - DDname string pointer and length in CCATAREA storage       *
*        - $DDN flag bit in CCATFLAG byte if it is found in TIOT      *
*        - Jobname (TSO userid) in CCATAREA storage                   *
*        - Display (PUTLINE) all DSN in DD concatenation using        *
*          msg CCAT800.                                               *
*                                                                     *
*  RETURN CODES:                                                      *
*        - 0   : specified dsname is valid                            *
*                                                                     *
*                                                                     *
*=====================================================================*
         ENTRY DERCCTLS
DERCCTLS DS    0D
L_DELTA_CCTCK  EQU   *-DERCCTDS
         SAVE  (14,12),,'DERCCTLS: CCAT DDN LIST DISPLAY'
         LA    R9,L_DELTA_CCTCK        get delta
         SR    R15,R9                  correct the program base
         LR    R9,R15                  copy current base register
*2019jan XC    VALCFLAG,VALCFLAG       clear flag byte
*2019jan OI    VALCFLAG,$LIST          remember to process DSN
         mvi   VALCFLAG,$LIST          remember to process DSN @2019jan
         B     VALIDATE                perform validation
                                       SPACE
         EJECT
*=====================================================================*
*                                                                     *
*  CONCAT SERVICE ROUTINE                                             *
*  DDNAME OPERAND VALIDATOR                                           *
*---------------------------------------------------------------------*
*                                                                     *
*  FUNCTIONS:                                                         *
*        Check and enter the specified DDname from F( ) operand       *
*        of this command based on standard DDN string pattern in      *
*        MVS system,  try to check if it has been allocated in        *
*        TIOT.                                                        *
*        If so, then try to lookup JFCB to search all datasets        *
*        concatenated with, and build DSN chained list (DSLINK)       *
*        as a private CONCAT control block                            *
*                                                                     *
*  INPUT:                                                             *
*        Specified F(DDname) in CONCAT operand                        *
*                                                                     *
*  OUTPUT:                                                            *
*        - DDname string pointer and length in CCATAREA storage       *
*        - $DDN flag bit in CCATFLAG byte if it is found in TIOT      *
*        - Jobname (TSO userid) in CCATAREA storage                   *
*                                                                     *
*  RETURN CODES:                                                      *
*        - 0   : specified dsname is valid                            *
*                                                                     *
*                                                                     *
*=====================================================================*
         ENTRY DERCCTDD
DERCCTDD DS    0D
L_DELTA_DDNCK  EQU   *-DERCCTDS
         SAVE  (14,12),,'DERCCTDD: CCAT DDN VALIDATOR'
         LA    R9,L_DELTA_DDNCK        get delta
         SR    R15,R9                  correct the program base
         LR    R9,R15                  copy to current base register
         LR    R2,R1                   copy validity check parm.list
         L     R10,4(R2)               point to the dynamic work area
*2019jan XC    VALCFLAG,VALCFLAG       clear flag byte
*2019jan OI    VALCFLAG,$DDN           remember to process DSN
         mvi   VALCFLAG,$DDN           remember to process DSN @2019jan
         OI    CCATFLAG,$DDN           ... also here
         EJECT
*=====================================================================*
*                                                                     *
*  COMMON LOGIC SERVICE PROCESSOR                                     *
*                                                                     *
*        REGISTERS : R0  - UNUSED                                     *
*                    R1  - CPPL map area                              *
*                    R2  - PPL map area,                              *
*                          PDL map area, and then                     *
*                          DSLINK map area.                           *
*                    R3  - work register                              *
*                    R4  - work register                              *
*                    R5  - work register                              *
*                    R6  - TIOT map area                              *
*                    R7  - SWA map area                               *
*                    R8  - S99 TU Parameter list map area             *
*                    R9  - Base address of this routine               *
*                    R10 - Dynamic work area                          *
*                    R11 - Inner linkage address                      *
*                    R12 - Main Logic base                            *
*                    R13 - save area                                  *
*                    R14 - outer linkage address                      *
*                    R15 - return code                                *
*                                                                     *
*=====================================================================*
         ENTRY VALIDATE
VALIDATE DS    0H
         GETMAIN RU,LV=L_SAVEAREA      obtain dynamic work area
         USING SAVEAREA,R1
         ST    R1,8(R13)               save its address
         ST    R13,B_PTR               save R13
         LR    R13,R1                  point to obtained area
         DROP  R1
         USING SAVEAREA,R13            establish addressability
         TM    VALCFLAG,$DDN+$DSN+$LIST  is it flagged ?
         BZ    PUTLINE_SRV             go here no flags
         TM    VALCFLAG,$LIST          is it flagged ?
         BO    GET_TIOT                go here no flags
         XC    RC,RC                   clear RC
         LM    R1,R3,0(R2)             get PDE address
         STM   R1,R3,CK_PDE_PLIST      save here
         TM    VALCFLAG,$DDN           is it DDn processing ?
         BO    DD_EXEC                 go here if so
         ST    R2,CKDS_PTR             save validity check pointer
         L     R2,PDE_PTR              point to PDE address
         USING PDE_DSN,R2              establish PDE addressing
         L     R3,DS_PTR               yes, point to DSN field
         LH    R4,DS_LEN               get it's length
         TM    DS_FLAG,$PRESENT        any DSN specified ?
         BO    CK_DS_EXIT              yes, exit
CK_DS_MISS     DS 0H
         LA    R15,4                   RC=4 for missing DSN
         ST    R15,RC                  and save it
CK_DS_EXIT     DS 0H
         STM   R3,R4,DSN_PARM
         DROP  R2
CK_EXIT  DS    0H
         LR    R1,R13                  restore savearea address
         L     R13,B_PTR               point to original savearea
         FREEMAIN RU,LV=L_SAVEAREA,A=(1)  release savearea
         L     R15,RC                  restore RC
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BSM   0,R14
DD_EXEC  DS    0H
         ST    R2,CKDD_PTR             save validity check pointer
         L     R2,PDE_PTR              point to PDE address
         USING PDE_DDN,R2              establish PDE addressing
         TM    DD_FLAG,$PRESENT        any DSN specified ?
         BNO   CK_DD_MISS              error if not specified
         MVC   SAVE_DDN+2(8),BLANK     make blank
         LH    R5,DD_LEN               get DDname length
         STH   R5,SAVE_DDN             save length here
         L     R4,DD_PTR               point to ddname string
         CH    R5,=H'8'                length > 8 ?
         BNH   GOT_DDPARM              no, save it
         LA    R5,8                    yes, make it 8
GOT_DDPARM     DS 0H
         STM   R4,R5,DDN_PARM          save DDN from CPPL here
         BCTR  R5,0                    reduce for EX MVC
         EX    R5,MVC_DD               copy DDname tring
         B     GET_TIOT                continue to obtain TIOT
         DROP  R2
BLANK    DC    CL8' '                  blank
MVC_DD   MVC   SAVE_DDN+2(*-*),0(R4)   << executed >>
                                       SPACE
GET_TIOT DS    0H
         USING TIOENTRY,R6             establish addressability
         LA    R6,TIOT_PTR             point to TIOT pointer
         EXTRACT (R6),FIELDS=TIOT      access TIOT
         L     R6,TIOT_PTR             point to TIOT
         MVC   HEADER(24),0(R6)        save header
         LA    R14,HEADER              point to header field
         ST    R14,JOBSPEC             save it here
         LA    R14,8(R14)              jump over jobname token
         LA    R15,8                   intialize loop
JOB_LOOP DS    0H
         CLI   0(R14),X'40'            is it blank
         BNE   GOT_JOBNAME             no, its mean upper limit
         BCTR  R14,1                   previous byte
         BCT   R15,JOB_LOOP            loop
GOT_JOBNAME    DS 0H
         ST    R15,JOBSPEC+4           save the length
         XR    R15,R15                 clear R15
         XR    R14,R14                 clear R14 for IC
         LA    R6,24(R6)               skip header
TIOT_LOOP DS   0H
         CLC   SAVE_DDN+2(8),TIOEDDNM  check TIOT DDname 4(R6)
         BE    DD_FOUND                find, go here
         IC    R14,TIOELNGH            entry length 0(R6)
         LA    R6,0(R6,R14)            next DD entry
         CLC   =F'0',TIOELNGH          end of TIOT ?
         BNE   TIOT_LOOP               No, loop
         B     CK_DD_MISS              yes, DDname not found
DD_FOUND DS    0H
         USING DSLINK,R2               DSN chain addressability
         USING SWAEPA,R5               SWA EPA addressability
         USING INFMJFCB,R7             JFCB addressability
         XR    R3,R3                   clear counter
         XR    R14,R14                 clear R14 for IC
         LA    R2,DSN_CHAIN            point to start DSN chaining
         B     DD_COPY                 go to copy DSN
DD_LOOP  DS    0H
         TM    VALCFLAG,$DDN           is it accessing process ?
         BO    DD_TIOT_CK              yes, skip msg display routine
         MVC   MSGTEXT(3),DSLDDN+5     move up the sequent number
         MVC   MSGTEXT+3(5),=CL5' -->'
         MVC   MSGTEXT+8(44),DSLDSN    dataset name
         BAS   R14,DISPLAY_DSN         display DSN
DD_TIOT_CK     DS 0H
         CLC   =F'0',TIOELNGH          end of TIOT ?
         BE    DD_FINISH               Yes, finish anyway
         CLC   BLANK(8),TIOEDDNM       is it DD concatenation member ?
         BNE   DD_FINISH               No, end of concatenation
         TM    VALCFLAG,$DDN           is it accessing process ?
         BNO   DD_COPY                 no, skip GETMAIN routine
DD_STORAGE     DS 0H
         GETMAIN R,LV=L_DSLINK,LOC=ANY  obtain V.storage
         ST    R1,DSLNEXT              create chain pointer
         LR    R2,R1                   save chaining pointer
DD_COPY  DS    0H
         LA    R5,EPA                  point to EPA
         ST    R5,EPA_PTR              save this pointer
         XC    SWAEPAX,SWAEPAX         clean EPA area @2024feb
         MVC   SWVA,TIOEJFCB           Copy SVA of JFCB into EPA
         SWAREQ FCODE=RL,EPA=EPA_PTR,MF=(E,SWAPLIST),UNAUTH=YES
         L     R7,SWBLKPTR             point to JFCB
         MVC   DSLDSN,JFCBDSNM         get DSN
         XC    DSLNEXT(8),DSLNEXT      mark end of chain
         OI    DSLFLAG,$ON             mark eligible to be used
         LA    R3,1(R3)                add 1 to accumulator
         CVD   R3,PACKED               convert to packed decimal
         UNPK  DSLDDN+4(4),PACKED(8)   unpack for EBCDIC
         OI    DSLDDN+7,X'F0'          turn off decimal sign
         MVC   DSLDDN(4),=C'CCAT'
         LA    R4,44                   DSN length
         LA    R5,DSLDSN               point to DSN string
DD_CALC  CLI   0(R5),X'40'             is it blank
         BE    DD_NEXT                 go next DD entry if so
         LA    R5,1(R5)                next byte
         BCT   R4,DD_CALC              loop
DD_NEXT  DS    0H
         ST    R4,DSLLEN
         LA    R4,44                   set length max 44
         S     R4,DSLLEN               calculate correct length
         ST    R4,DSLLEN               then .... save it
         XR    R14,R14                 make sure R14 always cleaned
         IC    R14,TIOELNGH            entry length 0(R6)
         LA    R6,0(R6,R14)            next DD entry
         B     DD_LOOP                 loop
DD_FINISH DS   0H
         STH   R3,DD_COUNT             save counter
         B     CK_EXIT                 then exit
CK_DD_MISS     DS 0H
         NI    CCATFLAG,X'FF'-$DDN     indicate DDname not found
         TM    VALCFLAG,$DDN           is it accessing process ?
         BO    CK_EXIT                 yes, exit immediately
         L     R1,ERRTIOT_PTR          point TIOT msg text
         MVC   MSGLINE(L'ERRTIOT),0(R1)  put msg here
         XC    MSGLEN(2),MSGLEN        clear length field
         OI    MSGLEN+1,L'ERRTIOT+4    specify msg length
         BAS   R14,DISPLAY             display this msg
         B     CK_EXIT                 then exit
         DROP  R2
         EJECT
*-------------------------------------*
*  PUTLINE SERVICE ROUTINE            *
*-------------------------------------*
PUTLINE_SRV    DS 0H
         BAS   R14,PUTLINE
         B     CK_EXIT
DISPLAY_DSN    DS 0H
         XC    MSGLEN(4),MSGLEN        clear PUTLINE buffer spec.
         MVI   MSGLEN+1,64             msg text length = 60 + 4
         B     PUTLINE                 process PUTLINE service
DISPLAY  DS    0H
         XC    MSGLEN+2(2),MSGLEN+2
PUTLINE  DS    0H
         ST    R14,SAVE_PUTL           save R14
         STM   R2,R4,SAVE_REGS         save work registers
         L     R2,CPPL_PTR             point to CPPL
         USING CPPL,R2                 establish addressability
         L     R3,CPPLUPT
         L     R4,CPPLECT
         XC    IOPLADS(20),IOPLADS      clear IOPL
         PUTLINE PARM=PUTBLOK,ECB=PUTLECB,ECT=(4),UPT=(3),             *
               OUTPUT=(MSGLEN,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         LM    R2,R4,SAVE_REGS         restore work registers
         L     R14,SAVE_PUTL           restore R14
         BR    R14                     return
         DROP  R6,R2,R9,R10,R13
         EJECT
                                       SPACE
*-------------------------------------*
*  SIMPLE HELP TEXT LIST              *
*-------------------------------------*
HELPTAB  DS    0H
         DC    C'Command Syntax:        +-   -+ +-     -+'
         DC    C'                       | ON  | | MSG   |'
         DC    C'  CCAT F(ddn) DS(dsn)  | top | | lmsg  |'
         DC    C'                       | bot | | emsg  |'
         DC    C'                       | off | | nomsg |'
         DC    C'                       +-   -+ +-     -+'
         DC    C'                                        '
         DC    C'  Issue HELP CCAT for further hint      '
         DC    C'                                        '
HELPTABW DC    C'     Copyright (C) 1991 -  DERU SUDIBYO '
L_HELPTAB      EQU *-HELPTABW
HELPTABL EQU   (*-HELPTAB)/L_HELPTAB
                                       SPACE
*-------------------------------------*
*  MESSAGES TEXTS LIST                *
*-------------------------------------*
MH000    DC    C'CCAT000 '
MT000    DC    C' successfully allocated'
MH001    DC    C'CCAT001 '
MT001    DC    C' successfully concatenated'
MH002    DC    C'CCAT002 '
MT002    DC    C' successfully released'
MH003    DC    C'CCAT003 DDname '
MT003    DC    C' already in use'
MH004    DC    C'CCAT004 '
MT004    DC    C' unallocatable'
MH005    DC    C'CCAT005 '
MT005    DC    C' already concatenated'
MH006    DC    C'CCAT006 '
MT006    DC    C' not cataloged'
MH007    DC    C'CCAT007 '
MT007    DC    C' reserved by other job'
MH008    DC    C'CCAT008 DDname '
MT008    DC    C' is illegal for SVC 99'
MH009    DC    C'CCAT009 DDname '
MT009    DC    C' not allocated yet'
MH010    DC    C'CCAT010 '
MT010    DC    C' not found'
MH011    DC    C'CCAT011 DDname '
MT011    DC    C' not available'
MH012    DC    C'CCAT012 DDname '
MT012    DC    C' internally conflict'
MH013    DC    C'CCAT013 '
MT013    DC    C' is a private catalog'
MH014    DC    C'CCAT014 Catalog error, '
MT014    DC    C' not accessed'
MH015    DC    C'CCAT015 OBTAIN error, '
MT015    DC    C' not accessed'
MH016    DC    C'CCAT016 '                                     @2019jan
MT016    DC    C' already in the right order'                  @2019jan
*                                                              @2019jan
MH900    DC    C'CCAT900 Function failure, S99ERROR='
MT900    DC    C', call your engineer'
                                       SPACE
ERRTIOT_PTR    DC A(ERRTIOT)
ERRTIOT  DC    C'CCAT990 No dataset/DDname found in TIOT or JFCB'
ERRKWD   DC    C'CCAT999 SYNTAX ERROR, Operand missing or invalid '
PUTBLOK  PUTLINE MF=L
STORAGE  EQU   L_CCATAREA+L_PPL+L_SAVEAREA+L_PDE_DSN+L_S99RB+512
         EJECT
*-------------------------------------*
*  PARAMETERS CONTROL LIST (PCL)      *
*-------------------------------------*
PCL      DS    0H
PCEDEFS  IKJPARM  DSECT=CCATPDL
PDLCMD   IKJKEYWD DEFAULT='ON'
         IKJNAME  'ON'
         IKJNAME  'TOP'
         IKJNAME  'BOT'                                        @2019jan
         IKJNAME  'BOTTOM'                                     @2019jan
         IKJNAME  'OFF'
DDNAME   IKJKEYWD
         IKJNAME  'DD',SUBFLD=DDN,ALIAS=('DDNAME','FILE','F')
DSNAME   IKJKEYWD DEFAULT='LIST'
         IKJNAME  'LIST',ALIAS=('LST','MAP')
         IKJNAME  'DS',SUBFLD=DSN,ALIAS=('DATASET','DSN')
PDLMSG   IKJKEYWD DEFAULT='MSG'
         IKJNAME  'MSG'
         IKJNAME  'NOMSG'
         IKJNAME  'EMSG'
         IKJNAME  'LMSG'
DDN      IKJSUBF
PDLDDN   IKJIDENT 'DDNAME',                                            *
               MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,                   *
               VALIDCK=DERCCTDD,PROMPT='DDname for Concatenation:'
DSN      IKJSUBF
PDLDSN   IKJPOSIT DSNAME,                                              *
               USID,                                                   *
               VALIDCK=DERCCTDS
         IKJENDP
L_PCL    EQU   *-PCL
         EJECT
*-------------------------------------*
*  PARAMETER DISCRIPTOR ENTRY (PDE)   *
*-------------------------------------*
PDE_DSN  DSECT
DS_PTR   DS    F             PTR ==> DATASET NAME
DS_LEN   DS    H             length of DSN exclude quotes
DS_FLAG  DS    X             flags byte
MEM_PTR  DS    F             PTR ==> MEMBER NAME
MEM_LEN  DS    H             length of MEMBER
MEM_FLAG DS    X             flags byte
PWD_PTR  DS    F             PTR ==> PASSWORD
PWD_LEN  DS    H             length of PASSWORD
PWD_FLAG DS    X             flags byte
L_PDE_DSN      EQU *-PDE_DSN
                                       SPACE
PDE_DDN  DSECT
DD_PTR   DS    F             PTR ==> DDNAME
DD_LEN   DS    H             length of DDNAME
DD_FLAG  DS    X             flags byte
L_PDE_DDN      EQU *-PDE_DDN
         EJECT
*-----------------------------*
*  PARSE PARAMETER LIST (PPL) *
*-----------------------------*
         IKJPPL
L_PPL    EQU   *-PPL
         EJECT
*------------------------------------------*
*  COMMAND PROCESSOR PARAMETER LIST (CPPL) *
*------------------------------------------*
         IKJCPPL
L_CPPL   EQU   *-CPPL
         EJECT
*-------------------------------------*
*  SVC 99 PARAMETER AND CONTROL BLOCK *
*-------------------------------------*
         IEFZB4D0
         IEFZB4D2
L_S99RB  EQU   (S99RBEND-S99RB)
         EJECT
*----------------------------------*
*  DSN_CHAIN LINKED LIST STRUCTURE *
*----------------------------------*
DSLINK   DSECT
* +--4-+----8---+--------------44-----||-----------+-4--+----+
* |Len |Temp.   | DATASET name                     |NEXT|////|
* |    |DD name |                                  |PTR |////|
* +----4--------12--------------------||-----------56---60---64
DSLLEN   DS    F             DSN string length
DSLDDN   DS    XL8           assigned temp. DDname
DSLDSN   DS    XL44          copy DSN string from TIOT
DSLNEXT  DS    F             pointer to next DSLINK
DSLFLAG  DS    X             flag
         DS    XL3           reserved for future used
L_DSLINK EQU   *-DSLINK
                                       SPACE
*-----------------------------*
*  SAVE/WORK AREA             *
*-----------------------------*
SAVEAREA DSECT
         DS    F             unused
B_PTR    DS    F             backword pointer
F_PTR    DS    F             forword pointer
REG_AREA DS    16F           registers save area
L_SAVEAREA EQU   *-SAVEAREA  save area length
*-------------------------------------*
*  DYNAMIC WORK AREA                  *
*-------------------------------------*
CCATAREA DSECT
CCAT_LEN       DS F          CCAT workarea length
CCAT_PTR       DS F          PTR ==> CCAT workarea
STOR_LEN       DS F          PTR ==> length of getmained AREA
STOR_PTR       DS F          PTR ==> STORAGE GETMAIN
S99P_PTR       DS F          PTR ==> S99RBP
S99RB_PTR      DS F          PTR ==> S99RB
SAVE_PTR       DS F          PTR ==> SAVEAREA
TIOT_PTR       DS F          PTR ==> Task I/O table
EPA_PTR        DS F          PTR ==> External Parameter Area
CPPL_PTR       DS F          PTR ==> CPPL
PPL_PTR        DS F          PTR ==> PPL
PCL_PTR        DS F          PTR ==> PCL
PDL_PTR        DS F          PTR ==> PDL
TUPL_PTR       DS F          PTR ==> TUPLIST
TU_PTR         DS F          PTR ==> TU
ANSWER_PTR     DS F          PTR ==> USER RESPONSE
CKDS_PTR       DS F          PTR ==> CKDSNAME ROUTINE
CKDD_PTR       DS F          PTR ==> CKDDNAME ROUTINE
IOPLADS        DC 4F'0'      I/O PARM. LIST
PUTLECB        DS F          ECB for PUTLINE service
SAVE13         DS F          R13 ROOM
SAVE14         DS F          R14 ROOM
SAVE_PUTL      DS F          R14 ROOM
SAVE_REGS      DS 5F         savearea for work registers
DSN_PARM       DC A(0,0)     DSN PTR AND LENGTH
MEM_PARM       DC A(0,0)     MEMBER PTR AND LENGTH
PWD_PARM       DC A(0,0)     PASSWORD PTR AND LENGTH
CCATJFCB       DS XL176      JFCB copy area
SWAPLIST       SWAREQ MF=L   SWA Parameter List
EPA            DS XL28       @2024feb
HEADER         DS XL24       TIOT header
DSN_CHAIN      DS XL(L_DSLINK) 1st DSN chaining linked list record
PACKED         DS D
INFO_CODE      DS XL4        copy of S99INFO
RETURN_CODE    DS XL4        copy of R15
REASON_CODE    DS XL4        copy of S99ERROR
STAT_CODE      DS X          status code                       @2019jan
STAT_C_dup     equ x'80'     - DS concat is duplicated         @2019jan
PROC_CODE      DS X          process code
               DS XL2        reserved
SAVE_DDN       DS XL10       saved DDname specification
TEMP_DDN       DS XL10       temporary DDname specification
OTHER_DSN      DS XL46       other DSN
ECB            DS F          Event Control Block
DDN_PARM       DC A(0,0)     DDN PTR AND LENGTH
DDN_RC         DS F          DDN validity check RC
RC             DS F          SVC 99 common return code
IF_CODE        DS H          SVC 99 information code
RS_CODE        DS H          SVC 99 reason code
RT_CODE        DS H          SVC 99 error code
ER_CODE        DS H          CCAT error return code
DD_COUNT       DS H          DD concatenation counter
                                       SPACE
*-----------------------------------*
*  COMMAND/OPERAND FLAGS            *
*-----------------------------------*
COMMAND  DS    X             SUBCOMMAND
$ON      EQU   X'80'         allocate/concatenate bit
$TOP     EQU   X'40'         force to reallocate existing DSN
$BOT     EQU   X'20'         reallocate existing DS to bottom  @2019jan
$done    EQU   X'10'         DS has complied as requested      @2019jan
$EMSG    EQU   X'08'         requested to display ERROR response
$MSG     EQU   X'04'         .................... INFO  ........
$NOMSG   EQU   X'02'         no msg will be prompted, just RC
$LIST    EQU   X'01'         request to display concatenation
                                       SPACE
*-----------------------------------*
*  VALIDATION FLAGS                 *
*-----------------------------------*
VALCFLAG DS    X             VALCFLAG
$DSN     EQU   X'10'         validate DSN
$DDN     EQU   X'20'         validate DDN
$QUOTE   EQU   X'40'         1.  DS is enclose in quotes
$PRESENT EQU   X'80'         2.  DS is present
                                       SPACE
*-----------------------------------*
*  PROCESSING FLAGS                 *
*-----------------------------------*
CCATFLAG DS    X             CCAT processing error flag
$NEW     EQU   X'80'         DDname is new at this time
$ERRS99  EQU   X'40'         general SVC 99 error
$ERRCVRY EQU   X'01'         error allocation recovery
$ERRALC  EQU   X'02'         error allocation
$ERRCON  EQU   X'04'         error concatenantion
$ERRUNL  EQU   X'08'         error unallocation
$ERRKWD  EQU   $ERRALC+$ERRCON+$ERRUNL
                                       SPACE
*-----------------------------------*
*  ALLOCATION TEXT UNIT PLIST       *
*-----------------------------------*
ALLOC_TUPLIST  DS  0F
ALLOC_DSN      DS F          PTR ==> Dataset name TU
ALLOC_TUPLIST_RETRY EQU *
ALLOC_DDN      DS F          PTR ==> DDname TU
ALLOC_STS      DS F          PTR ==> STATUS TU
ALLOC_ATR      DS F          PTR ==> ATTRIBUTE TU
L_ALLOC_TUPLIST_RETRY EQU  *-ALLOC_TUPLIST_RETRY
L_ALLOC_TUPLIST EQU  *-ALLOC_TUPLIST
L_ALLOC_PERM    EQU  L_ALLOC_TUPLIST-4  TUPL limit for perm alloc
L_ALLOC_TEMP    EQU  L_ALLOC_TUPLIST-8  TUPL limit for temp alloc
                                       SPACE
*-----------------------------------*
*  INFO_RETRIEVAL TEXT UNIT PLIST   *
*-----------------------------------*
QRY_TUPLIST    DS 0F
QRY_DDN  DS    F             PTR ==> DDname TU
QRY_ATR  DS    F             PTR ==> ATTRibute TU
QRY_DSN  DS    F             PTR ==> DSname TU
L_QRY_TUPLIST EQU   *-QRY_TUPLIST
*--- possible bits configuration of QRY_ATR ---------
$SHR     EQU   X'08'         DSN share attribute
$PRMCONC EQU   X'80'         permanently concatenanted
$BUSY    EQU   X'40'         in use
$PRMALLC EQU   X'20'         permanently allocated
$DYNALLC EQU   X'10'         dynamically allocated
                                       SPACE
*-----------------------------------*
*  DEALLOCATION TEXT UNIT PLIST     *
*-----------------------------------*
RELSE_TUPLIST DS 0F
RELSE_DDN DS   F             PTR ==> DDname TU
RELSE_ATR DS   F             PTR ==> attribute TU
RELSE_DSN DS   F             PTR ==> Dataset name TU
L_RELSE_TUPLIST EQU *-RELSE_TUPLIST
L_RELSE_ALL    EQU L_RELSE_TUPLIST-8
L_RELSE_ONE    EQU L_RELSE_TUPLIST-4
                                       SPACE
*-----------------------------------*
*  CONCATENATION TEXT UNIT PLIST    *
*-----------------------------------*
CONCT_TUPLIST  DS 0F         PTR ==> concatenation TU
CONCT_DDN      DS F
CONCT_ATR      DS F
L_CONCT_TUPLIST EQU *-CONCT_TUPLIST
                                       SPACE
*-----------------------------------*
*  DECONCATENATION TEXT UNIT PLIST  *
*-----------------------------------*
DECON_TUPLIST  DS F          PTR ==> concatenation TU
                                       SPACE
DSTU_PTR DS    F             PTR ==> DSN TEXT UNIT
DDTU_PTR DS    F             PTR ==> DDNAME TEXT UNIT
                                       SPACE
*-------------------------------------*
*  VALIDITY CHECK PARAMETER LIST      *
*-------------------------------------*
CK_PDE_PLIST   DS 0F
PDE_PTR  DS    F             PTR ==> PDE
USERWORD DS    F             PTR ==> workarea we gave to parse
CK_MSG   DS    F             PTR ==> 2nd level msg we can give back
                                       SPACE
*-------------------------------------*
*  MESSAGE TEXT AND POINTER           *
*-------------------------------------*
JOBSPEC  DC    A(0,0)        PTR and length  jobid in TIOT
MSGPARM  DC    A(0,0)        PTR and length of string for substitution
MSGSKEL  DS    XL12          PTRs and lengths of msg text skeleton
*-------------------------------------*
*  MESSAGES SKELETON  CONTROL BLOCK   *
*-------------------------------------*
         ORG   MSGSKEL
SKLHDR   DS    XL4           msg header pointer
SKLTXT   DS    XL4           msg trailer text pointer
SKLHDRL  DS    XL2           msg header length
SKLTXTL  DS    XL2           msg trailer text length
         ORG
MSGID    DS    H             msg count ID
MSGLEN   DC    H'164'
         DC    H'0'
MSGLINE  DC    CL160'Data ...//... allocated as a new file ..'
         ORG   MSGLINE
MSGHDR   DS    XL8           MSG HEADER AREA
MSGTEXT  DS    XL152         MSG TEXT AREA
         ORG
L_MSG    EQU   *-MSGLEN
RC_TEXT  DC    C', RC=0000.' RC for msg line
         ORG   RC_TEXT+5
RC_MSG   DC    C'0000'       printable RC value
         ORG
L_CCATAREA     EQU *-CCATAREA
          EJECT
*-------------------------------------*
*  MVS/ESA systems control blocks     *
*            and data areas           *
*-------------------------------------*
CVTMAP   CVT   DSECT=YES     CVT mapping needed by CALLTSSR
         IEFJESCT            JES control table
         IEFZB505 LOCEPAX=YES @2024feb
         IEFQMNGR
         IEFTIOT1            TIOT
         IEFJFCBN            JFCB
L_CVT    EQU   *-CVTMAP
         YREGS
                                       SPACE
*-------------------------------------*
*  MESSAGES DIRECTORY CONTROL BLOCK   *
*-------------------------------------*
MSGBLOK  DSECT
MSGCODE  DS    XL2           ERROR information code
MSGFLAG  DS    X             flag bits
         DS    X             reserved
MSGSKLA  DS    XL2           relative text skeleton address
MSGBLOKL EQU   *-MSGBLOK
                                       SPACE
         END
